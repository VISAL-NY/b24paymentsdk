//
//
////task androidJavadoc(type: Javadoc) {
////    source = android.sourceSets.main.java.srcDirs
////    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
////    android.libraryVariants.all { variant ->
////        if (variant.name == 'release') {
////            owner.classpath += variant.javaCompileProvider.get().classpath
////        }
////    }
////
////    exclude '**/R.html', '**/R.*.html', '**/index.html'
////    options.encoding 'utf-8'
////    options {
////        addStringOption 'docencoding', 'utf-8'
////        addStringOption 'charset', 'utf-8'
////        links 'https://docs.oracle.com/javase/7/docs/api/'
////        links 'https://d.android.com/reference'
////        links 'https://developer.android.com/reference/androidx/'
////    }
////}
////
////task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
////    archiveClassifier.set('javadoc')
////    from androidJavadoc.destinationDir
////
////    preserveFileTimestamps = false
////    reproducibleFileOrder = true
////}
////
////task javaSourcesJar(type: Jar) {
////    archiveClassifier.set('sources')
////    from android.sourceSets.main.java.srcDirs
////
////    preserveFileTimestamps = false
////    reproducibleFileOrder = true
////}

//apply plugin: 'maven-publish'
//apply plugin: 'signing'
//
//afterEvaluate {
//    publishing {
//        publications {
//            release(MavenPublication) {
//
//                from components.release
//
//                groupId=GROUP
//                version =VERSION_NAME
////                artifact androidJavadocJar
////                artifact javaSourcesJar
//                pom {
//                    name = artifactId
//                    description = POM_DESCRIPTION
//                    url = ''
//                    licenses {
//                        license {
//                            name = ''
//                            url = ''
//                        }
//                    }
//
//                    scm {
//                        connection = 'scm:git@github.com:visal-99/b24paymentsdk.git'
//                        url = 'https://github.com/visal-99/b24paymentsdk.git'
//                    }
//                    developers {
//                        developer {
//                            id = POM_DEVELOPER_ID
//                            name = POM_DEVELOPER_NAME
//                            email = POM_DEVELOPER_EMAIL
//                        }
//                    }
//                }
//            }
//        }
//        repositories {
////            maven {
////                name = "SonatypeSnapshot"
////
//////                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
//////                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
//////                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
////                url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
////                credentials {
////                    username ossrhUsername
////                    password ossrhPassword
////                }
////            }
//
//            maven {
//                name = "Sonatype"
//
////                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
////                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
////                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//                //url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
//                url="https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
//                credentials {
//                    username ossrhUsername
//                    password ossrhPassword
//                }
//            }
//        }
//    }
//}
//
//
//signing {
//    sign publishing.publications
//}




//
apply plugin: 'maven-publish'

afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                groupId =GROUP
                artifactId =ARTIFACTID
                version=VERSION_NAME

                artifact(bundleReleaseAar)
                pom.withXml {
                    final dependenciesNode = asNode().appendNode('dependencies')

                    ext.addDependency = { Dependency dep, String scope ->
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                            return // invalid dependencies should be ignored

                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('artifactId', dep.name)

                        if (dep.version == 'unspecified') {
                            dependencyNode.appendNode('groupId', project.ext.pomGroupID)
                            dependencyNode.appendNode('version', project.ext.pomVersion)
                            System.println("${project.ext.pomGroupID} ${dep.name} ${project.ext.pomVersion}")
                        } else {
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('version', dep.version)
                            System.println("${dep.group} ${dep.name} ${dep.version}")
                        }

                        dependencyNode.appendNode('scope', scope)
                        // Some dependencies may have types, such as aar, that should be mentioned in the POM file
                        def artifactsList = dep.properties['artifacts']
                        if (artifactsList != null && artifactsList.size() > 0) {
                            final artifact = artifactsList[0]
                            dependencyNode.appendNode('type', artifact.getType())
                        }

                        if (!dep.transitive) {
                            // In case of non transitive dependency, all its dependencies should be force excluded from them POM file
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('groupId', '*')
                            exclusionNode.appendNode('artifactId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            // For transitive with exclusions, all exclude rules should be added to the POM file
                            final exclusions = dependencyNode.appendNode('exclusions')
                            dep.properties.excludeRules.each { ExcludeRule rule ->
                                final exclusionNode = exclusions.appendNode('exclusion')
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }

                    configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                }
            }
        }
        repositories {
            maven {
                name = "sonatype"

//                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
//                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
//                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                url = "https://s01.oss.sonatype.org/content/repositories/releases/"
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

task cleanBuildPublishLocal(type: GradleBuild) {
    tasks = ['clean', 'build', 'publishToMavenLocal']
}

task cleanBuildPublish(type: GradleBuild) {
    tasks = ['clean', 'build', 'publish']
}